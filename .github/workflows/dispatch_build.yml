name: Lambda Deployment

on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      packagename:
        description: 'package-name'
        required: true
      function_name:
        description: "name of lambda fuction"
        required: true 
      dynamodb_partition_key:
        description: "partition key of dynamoDB"
        required: true       
      apigw_stage_name:
        description: "APIgw's stage(env) name"
        required: true 
env:
  AWS_DEFAULT_REGION: "ap-southeast-2"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_FPT }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_FPT }}
  AWS_TERRAFORM_BACKEND_BUCKET: "demo-backstage-techdocs"
jobs:
  build-infras:
    runs-on: self-hosted
    container: python:3.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Terraform and AWS CLI
      run: |
        wget https://releases.hashicorp.com/terraform/1.6.4/terraform_1.6.4_linux_amd64.zip
        unzip terraform_1.6.4_linux_amd64.zip
        mv terraform /usr/local/bin/
        terraform --version

        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        aws --version
    - name: create terraform.tfvars file
      run: echo "function_name = \"${{ github.event.inputs.function_name }}\"\ndynamodb_partition_key = \"${{ github.event.inputs.dynamodb_partition_key }}\"\napigw_stage_name = \"${{ github.event.inputs.dynamodb_partition_key }}\"" > ${{ github.event.inputs.function_name }}-terraform.tfvars

    - name: Build Infrastructure
      run: |
        cd infras-tf
        terraform init
        terraform plan
        terraform apply -auto-approve -var-file=${{ github.event.inputs.function_name }}-terraform.tfvars
    - name: push terraform.tfvars to s3 buckets
      run:  aws s3 cp terraform.tfvars s3://${{ env.AWS_TERRAFORM_BACKEND_BUCKET_LOCATION }}/terraform/${{ github.event.inputs.function_name }}-terraform.tfvars

  deploy-layer:
    needs: build-infras
    runs-on: self-hosted
    container: python:3.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install necessary tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        sudo apt-get install zip

        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        aws --version
        
    - name: Deploy Lambda Layer
      run: |
        mkdir -p python/lib/python3.10/site-packages/
        pip install -r requirement.txt --target=python/lib/python3.10/site-packages/
        zip -qr9 ${{ github.event.inputs.packagename }}.zip python
        layer_arn=$(aws lambda publish-layer-version --layer-name ${{ github.event.inputs.packagename }} --zip-file fileb://${{ github.event.inputs.packagename }}.zip --compatible-runtimes python3.10 --region ${{ env.AWS_DEFAULT_REGION }} | jq -r '.LayerVersionArn')
        aws lambda update-function-configuration --function-name ${{ github.event.inputs.function_name }} --layers $layer_arn

  deploy-lambda-code:
    needs: deploy-layer
    runs-on: self-hosted
    container: python:3.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install necessary tools
      run: |
        sudo apt-get update
        sudo apt-get install zip

        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        aws --version
        
    - name: Deploy Lambda Code
      run: |
        zip -r function.zip sample-source/custom_encoder.py sample-source/main.py
        aws lambda update-function-code --function-name ${{ github.event.inputs.function_name }} --zip-file fileb://function.zip
        aws lambda wait function-updated --function-name ${{ github.event.inputs.function_name }}
        aws lambda update-function-configuration --function-name ${{ github.event.inputs.function_name }} --region ${{ env.AWS_DEFAULT_REGION }}
